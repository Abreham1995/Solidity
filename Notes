Unsigned Integers
What the heck is an unsigned integer? 

First, let's go over integers. Integers include all positive and negative numbers without fractions. The numbers -2,-1,0,1,2 are all 
integers. This range continues in both the positive and negative direction as far as you can count!
To determine if the number is above or below zero we use the sign: + or -. An unsigned integer is an integer that has no sign. 
Solidity has a specific data type for unsigned integers called uint. A uint can be suffixed with the number of bits reserved for it.
For instance uint8 means that there are eight bits provided for the value of the variable.
What is the range of unsigned integers in eight bits? Eight bits can range from 00000000 to 11111111. This range can represent 256 unique values.
Since the range of unsigned integer values does not include negative numbers, it is simply 0 to 255. In decimal, the unsigned value of
00000000 is 0 and the value of 11111111 is 255. So, the max value a uint8 can store is 255. You can calculate the max value of a uint by 
doing (2 ^ n) - 1, where n is the number of bits it can use to store the value.

Accounts 
In Ethereum, accounts are often distinguished into two types: Externally Owned Accounts and Contract Accounts. The differences between these
accounts is largely conceptual as the EVM essentially treats them the same!Every account on the EVM has a public address and a balance. 
Contract accounts will also store their bytecode as well as their internal storage data.When making a call from an EOA to a Contract Account
it's important to know things like who is making the call, how much ether they are sending and the function they are intending to invoke 
with which arguments.The Solidity language handles the wiring up of the transaction data to the function we have defined on the contract. 
The language also gives us access to the transaction parameters through globals like msg.sender and msg.value.By providing these utilities 
for working with accounts we can easily define roles, permissions and track token balances in contracts. Let's learn all about working with 
accounts in Solidity!

Solidity Addresses
Let's talk about the address data type in Solidity!
An address on the EVM is a 160 bits long, or a 40 character, hexadecimal string:
address a = 0xc783df8a850f42e7f7e57013759c285caa701eb6;
 This is valid Solidity! We can store a fixed address in our contracts if we need to.

Receive Function
In the latest versions of Solidity, contracts cannot receive ether by default.In order to receive ether, a contract must specify
a payable function. This is another keyword which affects the function's mutability similar to view and pure.

Transferring Funds
We can make any regular function payable. This allows us to differentiate the purpose of the ether coming into the smart contract.

Self Destruct
Contracts can destroy themselves by using the SELFDESTRUCT opcode on the EVM! This opcode actually refunds ether in order to incentivize 
cleaning up the blockchain of unused contracts.

Reverting Transactions

In the EVM the main opcode to revert a transaction is REVERT. There are three ways to invoke the REVERT opcode from Solidity are assert, 
require and revert. We'll focus on the last two for now (see this stage's details section for more on assert).
We can revert a transaction in Solidity by using the require function and the revert statement.
A require statement has two forms:

1. require(someBooleanCondition);
2. require(someBooleanCondition, "Optional error message");
☝️ These will revert if someBooleanCondition is false. We can use these to check for all kinds of conditions.

The revert keyword also has two forms:
1. // old syntax to revert with a string
2. revert("Some error message");
3. // new syntax to revert with a custom error
4. revert SomeCustomError(arg1, arg2, ...);

☝️ Notice that, either way, revert does not take a boolean condition. 
Revert will always revert, so you will usually see it wrapped in a conditional statement:
1. if(someCondition) {
2.    revert SomeCustomError(arg1, arg2, ...);
3. }
Both revert and require use the REVERT opcode, they just provide different syntaxes to do so.
The recommended approach is to use custom errors in most cases as they provide a gas-efficient way to identify and debug issues.
⛽ A custom error, like a function, is identified by the first 4 bytes of the keccak256 hash of its canonical representation, which includes its name and parameter types.
In contrast, using string literals for error messages can consume many more bytes, as we discussed in our lesson on string literals.

Interfaces

The easiest way to enable one contract to interact with another is by defining the target contract. Interfaces serve this purpose; for example:
1. interface IToken {
2.   function getBalance(address user) external;
3. }
☝️ We can use this interface to properly communicate with a token contract that implements the getBalance method:

1. // tokenAddress: a contract adddress we want to communicate with
2. // userAddress: the address we want to lookup the balance for
3. uint balance = IToken(tokenAddress).getBalance(userAddress);

Behind the scenes Solidity is creating a message call that encodes the calldata for this getBalance call.

What's an Escrow? 🤔
An escrow is an agreement often used when transferring funds in exchange for a good or service. 
Funds can be held in escrow and a third party can be chosen to "arbitrate" or approve the transfer when the service or good is provided.
There are many use cases for Escrows across real estate, charities and marketplaces. It's the bread and butter of Ethereum Smart Contracts as it's quite easy to write, and yet, so powerful. 🍞🧈

Let's Get Building 👷‍♂️👷‍♀️
We hope that during this block you'll be thinking about ways that you can use an escrow to launch new decentralized applications. You'll be able to use all the code you wrote in a working web application!

With a bit of creativity you can create something new and amazing. Start brainstorming! 🧠🎨
State Variables
We'll have three parties involved in the Escrow:

1. 🙂 Depositor - The payer of the Escrow, makes the initial deposit that will eventually go to the beneficiary.
2. 👨‍🔧 Beneficiary - The receiver of the funds. They will provide some service or good to the depositor before the funds are transferred by the arbiter.
3. 👩‍⚖️ Arbiter - The approver of the transaction. They alone can move the funds when the goods/services have been provided.
For this first stage, let's create these addresses as public storage variables!

🏁 Your Goal: Addresses

Create three public storage variables for the addresses of the depositor, beneficiary and arbiter.
Solidity Arrays
Working with arrays in Solidity can be tricky! 😖
We'll need to understand the data location, or where the array is stored. 📍
We'll also need to understand the memory allocation, whether it is fixed size or it can be dynamically resized. 🧠
Fixed Arrays
Fixed sized arrays have a set amount of values at compile-time.

We can declare fixed size arrays in Solidity like so:

1. uint[3] x = [1,2,3];
2. address[1] y = [0xc783df8a850f42e7F7e57013759C285caa701eB6];
3. bool[4] z = [true, true, false, false];

☝️ These arrays have their size determined at compile-time. They cannot grow or shrink in size.
📖 If you store less elements in the array than the fixed size, the rest of the elements will be the default value for the data type (i.e. false for bool and 0 for uint). 
If you store more elements in the array than the fixed size, you'll get a compile-time TypeError!
The above array declarations will work for state variables. Inside of a function, however, we will need to specify the data location of an array:

1. uint[3] memory numbers = [1, 2, 3];
☝️ The data location for this array is memory. Memory is temporary, it will only last as long as the transaction. The other data locations are calldata for referring to message call arguments and storage for persistence.

🔍 Let's take a closer look at Data Location in details.
Retrieve Elements 🔎
We can also retrieve elements from our array with numerical indexes:

1. uint[3] memory numbers = [1, 2, 3];

2. console.log(numbers[0]); // 1
3. console.log(numbers[1]); // 2
For Loops 🌀
For loops in Solidity have similar syntax as JavaScript and other C-family languages:

1. for(uint i = 0; i < 10; i++) {
2.   // run statement
3. }
Structs
Structs provide Solidity Developers with a way to build custom data types. These data types can have multiple fields of data types we already have previously discussed.

For example:

1. struct Account {
2.   uint balance;
3.   bool isActive;
4. }
☝️ This struct is composed of a uint and a bool. If this struct were defined outside of a contract, it can be shared across multiple contracts like so:

1. struct Account {
2.   uint balance
3.   bool isActive;
4. }

5. contract A {
6.   Account owner;
7.   Account recipient;
8. }

9. contract B {
10.   mapping (address => Account) accounts;
11. }

Structs
With structs we can create custom types in Solidity that are essentially groupings of variables.

For instance:

1. enum Directions { Up, Down, Left, Right }

2. struct Hero {   
3.   Directions facing;
4.   uint health;
5.   bool inAir;
6. }
☝️ With this struct we can create new heroes which contain just these three properties.

We can create a new Hero by invoking the struct with parenthesis:

1. Hero hero = Hero(Directions.Up, 100, true);
Then we can use the . operator to retrieve values from the hero:

1. console.log(hero.facing == Directions.Up); // true
2. console.log(hero.health); // 100
3. console.log(hero.inAir); // true
🔍 Notice that the order of the parameters matters when creating a new struct, we could have also named the properties instead.
Mappings
Mappings are an important data type in Solidity. With a mapping we can take values of one data type and map them to values of another data type.

Let's consider an example. Say you wanted to track balances of a bunch of addresses:

address	balance
0xc783df8a850f42e7F7e57013759C285caa701eB6	500
0xeAD9C93b79Ae7C1591b1FB5323BD777E86e150d4	100
0xE5904695748fe4A84b40b3fc79De2277660BD1D3	20
Based on what we have learned so far you might be thinking of creating an array of structs:

struct Account {
    address addr;
    uint balance;
}

Account[] accounts;
☝️ This works, certainly. When we need to find an address balance we can iterate through the accounts to find the address we're looking for and retrieve the balance.

However, there's a better way! We can use a mapping:

mapping(address => uint) balances;
☝️ With a mapping each address is mapped to a unique place in memory where it stores the uint balance. Looking up the balance is as simple as providing the address to the mapping: balances[addr].

💡 Under the hood, the storage location is found by hashing the balances variable location with the address passed in. It's a simple lookup! Much more efficient than iteration. Generally it's better to try to use a mapping first and only use an array when you realize you need to iterate.

Now that we see how mappings fit into the picture, let's learn how to build them! 🗺️
Mapping
Mappings allow you to store and retrieve elements quickly with a key. The key points to a location in memory where the value is stored.

The key can be any basic data type in Solidity. It cannot be a reference data type like a struct or an array.

The value, on the other hand, can be any Solidity type. It can be a struct, an array or even another mapping!

Let's see an example of a mapping:
import "forge-std/console.sol";
contract Contract {
    // create a score state variable 
    // maps an address (key) to a uint (value)
    mapping(address => uint) public score;

    function addPoint() external {
        // we're using msg.sender as the key 
        // to look up the score in storage
        console.log(score[msg.sender]); // 0

        // we can also update that location in storage
        score[msg.sender]++;
        console.log(score[msg.sender]); // 1
    }
}
☝️ The variable score takes an address and maps it to a uint. Each address will be mapped to its own unique uint value that it can retrieve and modify.

The addPoint function uses the msg.sender as the key to update a location in memory. This location in memory for a value is initialized at zero. We can add to it using the msg.sender as the key, as shown above.

💡 The score mapping is public which means that there will be a getter function created automatically. We can make a request to an Ethereum node invoking this getter function with an address and get a uint back.
